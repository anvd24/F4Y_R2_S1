#include "utils.fos"
#include "_macros.fos"
#include "_colors.fos"

import bool LockerClose(Item& item) from "lockers";
import void AddSpecialBonus(Item@ it) from "item_bonus";

void locker_NewRenoArms(Item& item, bool firstTime)
{
	item.SetEvent(ITEM_EVENT_SKILL, "_UseRewardContainer");
	//remove this locker to low condition few guards 3 person
	//CreateTimeEvent(AFTER(REAL_MINUTE(Random(10,30))), "e_Spawn", item.Id, false);
	CreateTimeEvent(AFTER(REAL_MINUTE(Random(20,30))), "e_SpawnLow", item.Id, false);
}

void locker_Warehouse(Item& item, bool firstTime)
{
	item.SetEvent(ITEM_EVENT_SKILL, "_UseRewardContainer");	
	CreateTimeEvent(AFTER(REAL_MINUTE(Random(20,30))), "e_Spawn", item.Id, false);
}

void locker_NewRenoSewers(Item& item, bool firstTime)
{
	item.SetEvent(ITEM_EVENT_SKILL, "_UseRewardContainer");		
	CreateTimeEvent(AFTER(REAL_MINUTE(Random(20,30))), "e_SpawnLow", item.Id, false);
}


// Executed when opening reward chest
bool _UseRewardContainer(Item& item, Critter& crit, int skill)
{
	// Opening / Closing
    if((skill == -1) || (skill == SK_STEAL))
    {
		if(!isSlagsKilled(crit))
        {
			uint16 hexX = 0;
			uint16 hexY = 0;
			Map@   map = item.GetMapPosition(hexX, hexY);
			map.SetText(hexX, hexY, COLOR_WHITE,  "The locker looks guarded.");		
            return true;
        }
		
        // open it if closed
        if(_LockerIsClose(item))
        {
			//item.LockerId = 0;
			//item.LockerId = Random(98989, 989898);
			//item.LockerComplexity = Random(50,50);			
            return false;
        }
    }
    return false;
}



bool isSlagsKilled(Critter& player)
{     											//  ST_NPC_ROLE == 1 dla SLags w Warehouse; w skrypcie mob.fos ST_NPC_ROLE == 1 oznacza jako agro dla obliczania dystansu od gracza
	uint numLifeSlags = player.GetMap().GetNpcCount(1, FIND_ONLY_NPC | FIND_LIFE); 			 // Critter_ParamIndex4  ST_NPC_ROLE
																							 //	Critter_ParamValue4  1
	if(numLifeSlags!=0)
	{
		for(uint i = 0; i < numLifeSlags; i++)
		{
			Critter@ mob = player.GetMap().GetNpc(1, FIND_ONLY_NPC | FIND_LIFE, i);
			//mob.Say(SAY_SHOUT_ON_HEAD, "DON'T TOUCH IT!");
			switch (Random(1,5))
			{
				case 1: {mob.Say(SAY_SHOUT_ON_HEAD, "DON'T TOUCH IT!"); break;}
				case 2: {mob.Say(SAY_SHOUT_ON_HEAD, "PUT YOUR HANDS AWAY!"); break;}
				case 3: {mob.Say(SAY_SHOUT_ON_HEAD, "GET AWAY FROM THE LOCKER!"); break;}	
				case 4: {mob.Say(SAY_SHOUT_ON_HEAD, "Who do you think you are, bastard!!!"); break;}
			    case 5: {mob.Say(SAY_SHOUT_ON_HEAD, "This is our charm, do not touch!!!"); break;}
			}
			
		}	
		return false;
	}
	else
		return true;

}


uint e_Spawn(array<uint>@ values)
{
	Item@ item = GetItem(values[0]);
    if(!valid(item))
        return 0;
	//ClearContainer(item);
	ClearContainerTenLeft(item);

	if(Random(0,99)<50)
		{
		switch (Random(1,10))
			{
			case 1: 	{SpawnBuffItem(item, PID_DESERT_COMBAT_ARMOR); break;}
			case 2: 	{SpawnBuffItem(item, PID_DESERT_COMBAT_HELMET); break;}
			case 3: 	{SpawnBuffItem(item, PID_BROTHERHOOD_COMBAT_ARMOR); break;}	
			case 4: 	{SpawnBuffItem(item, PID_BROTHERHOOD_HELMET); break;}
			case 5: 	{SpawnBuffItem(item, PID_NCR_ARMOR); break;}			
			case 6: 	{SpawnBuffItem(item, PID_NCR_HELMET); break;}				
			case 7: 	{SpawnBuffItem(item, PID_ENCLAVE_COMBAT_ARMOR); break;}			
			case 8: 	{SpawnBuffItem(item, PID_ENCLAVE_COMBAT_HELMET); break;}
			case 9: 	{SpawnBuffItem(item, PID_COMBAT_ARMOR_MK_II); break;}
			case 10: 	{SpawnBuffItem(item, PID_COMBAT_HELMET_MK_II); break;}
			case 11: 	{SpawnBuffItem(item, PID_TESLA_ARMOR); break;}
			case 12: 	{SpawnBuffItem(item, PID_TESLA_HELMET); break;}			

			}
		}
	else
		{
		switch (Random(1,13)) //case must be like last random value 
			{
			case 1: 	{SpawnBuffItem(item, PID_ROCKET_LAUNCHER); break;}
			case 2: 	{SpawnBuffItem(item, PID_PLASMA_RIFLE); break;}
			case 3: 	{SpawnBuffItem(item, PID_GATLING_LASER); break;}
			case 4: 	{SpawnBuffItem(item, PID_SNIPER_RIFLE); break;}
			case 5: 	{SpawnBuffItem(item, PID_223_PISTOL); break;}
			case 6: 	{SpawnBuffItem(item, PID_HK_P90C); break;}	
			case 7: 	{SpawnBuffItem(item, PID_PANCOR_JACKHAMMER); break;}
			case 8: 	{SpawnBuffItem(item, PID_LIGHT_SUPPORT_WEAPON); break;}
			case 9: 	{SpawnBuffItem(item, PID_M60); break;}		
			case 10: 	{SpawnBuffItem(item, PID_AVENGER_MINIGUN); break;}
			case 11: 	{SpawnBuffItem(item, PID_IMPROVED_FLAMETHROWER); break;}
			case 12: 	{SpawnBuffItem(item, PID_LASER_RIFLE_EXT_CAP); break;}
			case 13: 	{SpawnBuffItem(item, PID_GRENADE_LAUNCHER); break;}
			}
		}
		
	if(Random(0,99)<6)
		{
		switch (Random(1,3))
			{
			case 1: 	{item.AddItem(PID_2MM_EC_AMMO, 10, 0); break;}
			case 2: 	{item.AddItem(PID_4_7MM_CASELESS, 25, 0); break;}
			case 3:		{item.AddItem(PID_HYPO, 1, 0); break;} 			//case 3: 	{item.AddItem(PID_SHOTGUN_DRAGON_BREATH_SHELLS, 10, 0); break;}
			}
		}
		
		
	if(Random(0,99)<3)
		{
		switch (Random(1,14))
			{
			case 1: 	{SpawnBuffItem(item, PID_HARDENED_POWER_ARMOR); break;}
			case 2: 	{SpawnBuffItem(item, PID_POWERED_ARMOR); break;}
			case 3: 	{SpawnBuffItem(item, PID_POWER_HELMET); break;}	
			case 4: 	{SpawnBuffItem(item, PID_HARDENED_POWER_HELMET); break;}
			case 5: 	{SpawnBuffItem(item, PID_KEEPBRIGE_ROBE); break;}			
			case 6: 	{SpawnBuffItem(item, PID_TURBO_PLASMA_RIFLE); break;}				
			case 7: 	{SpawnBuffItem(item, PID_ALIEN_LASER_PISTOL); break;}			
			case 8: 	{SpawnBuffItem(item, PID_BOZAR); break;}		
			case 9: 	{SpawnBuffItem(item, PID_SOLAR_SCORCHER); break;}
			case 10: 	{SpawnBuffItem(item, PID_HK_G11E); break;}	
			case 11: 	{SpawnBuffItem(item, PID_PK12_GAUSS_PISTOL); break;}
			case 12: 	{SpawnBuffItem(item, PID_VINDICATOR_MINIGUN); break;}			
			case 13: 	{SpawnBuffItem(item, PID_YK42B_PULSE_RIFLE); break;}
			case 14: 	{SpawnBuffItem(item, PID_M72_GAUSS_RIFLE); break;}
			}
		}
		
	if(Random(0,99)<2)
		{
		switch (Random(1,10))
			{
			case 1: 	{item.AddItem(PID_IMPLANT_DERMAL, 1, 0); break;}			
			case 2: 	{item.AddItem(PID_IMPLANT_PHOENIX, 1, 0); break;}
			case 3: 	{item.AddItem(PID_IMPLANT_NEMEAN, 1, 0); break;}
			case 4: 	{item.AddItem(PID_IMPLANT_STRENGTH, 1, 0); break;}
			case 5: 	{item.AddItem(PID_IMPLANT_PERCEPTION, 1, 0); break;}	
			case 6: 	{item.AddItem(PID_IMPLANT_ENDURANCE, 1, 0); break;}
			case 7: 	{item.AddItem(PID_IMPLANT_CHARISMA, 1, 0); break;}			
			case 8: 	{item.AddItem(PID_IMPLANT_INTELLIGENCE, 1, 0); break;}				
			case 9: 	{item.AddItem(PID_IMPLANT_AGILITY, 1, 0); break;}			
			case 10: 	{item.AddItem(PID_IMPLANT_LUCK, 1, 0); break;}
			}
		}
		
	if(FLAG(item.LockerCondition, LOCKER_ISOPEN)) LockerClose(item);

    //item.LockerId = Random(98989, 989898);
    //item.LockerComplexity = Random(50,50);
    	
    return REAL_MINUTE(Random(20,30));	
}


uint e_SpawnLow(array<uint>@ values)
{
	Item@ item = GetItem(values[0]);
    if(!valid(item))
        return 0;
	//ClearContainer(item);
	ClearContainerTenLeft(item);

	if(Random(0,99)<50)
		{
		switch (Random(1,4))
			{
			case 1: 	{SpawnBuffItem(item, PID_COMBAT_ARMOR); break;} 				
			case 2: 	{SpawnBuffItem(item, PID_COMBAT_HELMET); break;} 					
			case 3: 	{SpawnBuffItem(item, PID_COMBAT_ARMOR_MK_II); break;} 				
			case 4: 	{SpawnBuffItem(item, PID_COMBAT_HELMET_MK_II); break;} 			
			
			}
		}
	else
		{
		switch (Random(1,11))
			{
			case 1: 	{SpawnBuffItem(item, PID_ROCKET_LAUNCHER); break;}						
			case 2: 	{SpawnBuffItem(item, PID_PLASMA_RIFLE); break;}							
			case 3: 	{SpawnBuffItem(item, PID_SNIPER_RIFLE); break;}							
			case 4: 	{SpawnBuffItem(item, PID_223_PISTOL); break;}							
			case 5: 	{SpawnBuffItem(item, PID_HK_P90C); break;}								
			case 6: 	{SpawnBuffItem(item, PID_PANCOR_JACKHAMMER); break;}					
			case 7: 	{SpawnBuffItem(item, PID_LIGHT_SUPPORT_WEAPON); break;}					
			case 8: 	{SpawnBuffItem(item, PID_M60); break;}												
			case 9: 	{SpawnBuffItem(item, PID_AVENGER_MINIGUN); break;}						
			case 10: 	{SpawnBuffItem(item, PID_GRENADE_LAUNCHER); break;}			
			case 11: 	{SpawnBuffItem(item, PID_INDEPENDENT); break;}				
			
			
			}
		}
		
	if(Random(0,99)<6)
		{
		switch (Random(1,2))
			{
			case 1: 	{item.AddItem(PID_GUNPOWDER, 10, 0); break;}
			case 2: 	{item.AddItem(PID_GUNPOWDER2, 10, 0); break;}
			}
		}

	if(FLAG(item.LockerCondition, LOCKER_ISOPEN)) LockerClose(item);

    //item.LockerId = Random(98989, 989898);
    //item.LockerComplexity = Random(50,50);
    	
    return REAL_MINUTE(Random(20,30));	
}


void SpawnBuffItem(Item& container, uint16 pid)
{
	Item@ it = container.AddItem(pid, 1, 0);
	AddSpecialBonus(it);
}

